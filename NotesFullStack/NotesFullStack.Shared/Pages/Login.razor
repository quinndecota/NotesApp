@page "/login"

@attribute [ExcludeFromInteractiveRouting]

@inject NavigationManager NavigationManager
@inject IAuthService AuthService


<div class="flex h-screen w-screen content-center items-center justify-center bg-gray-100" >
    <div class="rounded-md bg-white p-5 shadow">
        <h1>Login</h1>
        <EditForm Model="_loginModel" OnValidSubmit="LoginAsync" FormName="loginForm">
            <DataAnnotationsValidator />
            <div class="spave-y-3 bg-white">
                <div >
                    <label>Email</label>
                    <InputText @bind-Value="_loginModel.Email" class="w-full px-2 py-1" placeholder="Enter Email" />
                    <ValidationMessage For="() => _loginModel.Email" class="text-red-700" />

                </div>

                <div class="">
                
                    <label>Password</label>
                    <InputText @bind-Value="_loginModel.Password" class="password w-full px-2 py-1" placeholder="Enter Password" />
                    <ValidationMessage For="() => _loginModel.Password" class="text-red-700" />

                </div>


                @if (_errorMessage is not null)
                {
                    <p class="p3 flex justify-between bg-red-400" id="err">
                        <label>@_errorMessage</label>

                        <button type="button" onclick="document.getElementById('err').remove()" class="font-bold">X</button>
                    </p>
                }

                <div class="">
                
                    <button type="submit" class="w-full rounded-md bg-blue-700 text-center text-white hover:bg-blend-darken">Login</button>
                    <hr/>
                    <NavLink href="register" class="text-blue-700">No Account? Click here.</NavLink>

                </div>
            </div>
        </EditForm>

    </div>
</div>
@code {
    [SupplyParameterFromForm(FormName = "loginForm")]
    private LoginModel _loginModel { get; set; } = new();
    private string? _errorMessage;
    private async Task LoginAsync()
    {

        var result = await AuthService.LoginAsync(_loginModel);

        if (!result.IsSuccess)
        {
            //Error
            _errorMessage = result.Error;

            return;
        }
        //Success
        var loggedInUser = result.Data;

        var platformLoginResult = await AuthService.PlatformLoginAsync(loggedInUser);
        if(!platformLoginResult.IsSuccess)
        {
            _errorMessage = result.Error;
            return;
        }
        //Set Cookies to Authorized

        //Nav
        NavigationManager.NavigateTo("/");
    }
}
